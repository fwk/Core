<?php

namespace Fwk\Core\Action;

class OtherCallableController
{
    public function method()
    {
        return 'test_method_callable';
    }
}

/**
 * Test class for CallableActionProxy.
 * Generated by PHPUnit on 2013-10-03 at 17:50:26.
 */
class CallableActionProxyTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var CallableActionProxy
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CallableActionProxy(function() {
            return 'test_proxy';
        });
    }

    /**
     * 
     */
    public function testExecute() {
        $this->assertEquals('test_proxy', $this->object->execute($this->getApp(), $this->getContext()));
    }
    
    public function testExecuteContextAware() {
        $context = $this->getContext();
        $context->setActionName('TestAction');
        $this->object = new CallableActionProxy(function(\Fwk\Core\Context $context) {
            return $context->getActionName(); 
        });
        
        $this->assertEquals('TestAction', $this->object->execute($this->getApp(), $context));
    }
    
    public function testExecuteServicesAware() {
        $app = $this->getApp();
        $context = $this->getContext();
        $app->getServices()->set('test', 'test_value');
        $this->object = new CallableActionProxy(function(\Fwk\Di\Container $services) {
            return $services->get('test');
        });
        
        $this->assertEquals('test_value', $this->object->execute($app, $context));
    }
    
    public function testExecuteAllAware() {
        $app = $this->getApp();
        $context = $this->getContext();
        $context->setActionName('TestAction');
        $app->getServices()->set('test', 'test_value');
        $this->object = new CallableActionProxy(function(\Fwk\Core\Context $context, \Fwk\Di\Container $services) {
            return $services->get('test') . $context->getActionName();
        });
        
        $this->assertEquals('test_valueTestAction', $this->object->execute($app, $context));
    }
    
    public function testOtherCallable() { 
        $callable = array(new OtherCallableController(), 'method');
        $this->object = new CallableActionProxy($callable);
        $this->assertEquals('test_method_callable', $this->object->execute($this->getApp(), $this->getContext()));
    }
    
    public function testInvalidCallable() { 
        $callable = array('pwet', 'method');
        $this->setExpectedException('InvalidArgumentException');
        $this->object = new CallableActionProxy($callable);
    }

    protected function getApp() {
        return \Fwk\Core\Application::factory('testApp');
    }
    
    protected function getContext() {
        $req = \Symfony\Component\HttpFoundation\Request::createFromGlobals();
        return new \Fwk\Core\Context($req);
    }
}
