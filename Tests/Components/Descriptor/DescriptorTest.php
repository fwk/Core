<?php

namespace Fwk\Core\Components\Descriptor;

/**
 * Test class for Descriptor.
 * Generated by PHPUnit on 2013-10-12 at 21:27:59.
 */
class DescriptorTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Descriptor
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Descriptor(TEST_RESOURCES_DIR . 
            DIRECTORY_SEPARATOR . 'Descriptor' .
            DIRECTORY_SEPARATOR . 'app_test.xml'
        );
    }

    /**
     */
    public function testPropertizeString() {
        $this->object->set('testProp', 'value');
        $this->object->set('testAnotherOne', 'one');

        $this->assertEquals('hey value', $this->object->propertizeString('hey :testProp'));
        $this->assertEquals('hey value how is one', $this->object->propertizeString('hey :testProp how is :testAnotherOne'));
    }

    public function testProperties() {
        $this->assertFalse($this->object->has('testProp'));
        $this->object->set('testProp', 'value');
        $this->assertTrue($this->object->has('testProp'));
        $this->object->set('testProp', null);
        $this->assertFalse($this->object->has('testProp'));
        $this->object->set('testProp', 'value');
        $this->assertEquals('value', $this->object->get('testProp'));
        $this->assertEquals(null, $this->object->get('inxesitant'));
    }

    public function testIniProperties() {
        $this->assertEquals($this->object, $this->object->iniProperties(
                TEST_RESOURCES_DIR . DIRECTORY_SEPARATOR . 'Descriptor' .
                DIRECTORY_SEPARATOR . 'config-one.ini'
        ));
        $this->assertTrue($this->object->has('requestMatcherService'));
        $this->assertEquals('requestMatcher', $this->object->get('requestMatcherService'));
    }
    
    public function testWrongIniPropertiesCategory() {
        $this->setExpectedException('Fwk\Core\Components\Descriptor\Exception');
        $this->assertEquals($this->object, $this->object->iniProperties(
                TEST_RESOURCES_DIR . DIRECTORY_SEPARATOR . 'Descriptor' .
                DIRECTORY_SEPARATOR . 'config-one.ini', 'inexistantCat'
        ));
    }
    
    public function testWrongIniPropertiesFile() {
        $this->setExpectedException('Fwk\Core\Components\Descriptor\Exception');
        $this->assertEquals($this->object, $this->object->iniProperties(
                TEST_RESOURCES_DIR . DIRECTORY_SEPARATOR . 'Descriptor' .
                DIRECTORY_SEPARATOR . 'inexistant-file.ini'
        ));
    }

    /**
     */
    public function testExecute() {
        $app = $this->object->execute('testApp');
        $this->assertInstanceOf('Fwk\Core\Application', $app);
        $this->assertTrue($app->exists('Home'));
        $this->assertTrue($app->exists('Hello'));
    }
    
    /**
     */
    public function testLoadListeners() {
        $this->assertTrue(is_array($this->object->loadListeners(new \Fwk\Di\Container())));
        $this->assertEquals(3, count($this->object->loadListeners(new \Fwk\Di\Container())));
    }
    
    /**
     */
    public function testLoadListenersMultipleSources() {
        $this->assertEquals($this->object, $this->object->import(
            TEST_RESOURCES_DIR . DIRECTORY_SEPARATOR . 'Descriptor' .
            DIRECTORY_SEPARATOR . 'app_test2.xml'
        ));
        $this->assertTrue(is_array($this->object->loadListeners(new \Fwk\Di\Container())));
        $this->assertEquals(4, count($this->object->loadListeners(new \Fwk\Di\Container())));
    }
}
