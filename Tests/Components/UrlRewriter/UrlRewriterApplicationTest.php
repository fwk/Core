<?php

namespace Fwk\Core\Components\UrlRewriter;

use Fwk\Di\ClassDefinition;
use Symfony\Component\HttpFoundation\Request;
/**
 * Test class for ResultTypeService.
 * Generated by PHPUnit on 2013-10-07 at 00:23:59.
 */
class UrlRewriterApplicationTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \Fwk\Core\Application
     */
    protected $app;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $service = new UrlRewriterService();
        $service->addRoutes(array(
            new Route('TestAction', '/test/:result', array(new RouteParameter('result'))),
            new Route('Unknown', '/bad/action'))
        );
        
        $app = \Fwk\Core\Application::factory('testApp')
                ->addListener(new \Fwk\Core\Components\RequestMatcher\RequestMatcherListener('requestMatcher'))
                ->addListener(new UrlRewriterListener('urlRewriter'));
        
        $app['TestAction'] = function($result) {
            return $result;
        };
        
        $app->getServices()->set(
            'requestMatcher', 
            new ClassDefinition(
                'Fwk\\Core\\Components\\RequestMatcher\\RequestMatcher'
            ), 
            true
        );
        $app->getServices()->set('urlRewriter', $service, true);
        
        $this->object = $app;
    }
    
    public function testEasyUrl()
    {
        $req = Request::create('TestAction.action?result=success');
        $result = $this->object->run($req);
        
        $this->assertEquals('success', $result->getContent());
    }
    
    public function testEasyRewrite()
    {
        $req = Request::create('/test/success');
        $result = $this->object->run($req);
        
        $this->assertEquals('success', $result->getContent());
    }
    
    public function testRewriteErroneousAction()
    {
        $req = Request::create('/bad/action');
        $this->setExpectedException('Fwk\Core\Components\UrlRewriter\Exception');
        $result = $this->object->run($req);
    }
    
    public function testReverseUrls()
    {
        $service = $this->object->getServices()->get('urlRewriter');
        $this->assertEquals('/test/success', $service->reverse('TestAction', array('result' => 'success')));
        $this->assertEquals('/bad/action', $service->reverse('Unknown'));
    }
    
    public function testSomeServiceMethods()
    {
        $service = $this->object->getServices()->get('urlRewriter');
        $this->assertEquals(2, count($service->getRoutes()));
    }
}
